.. |n| raw:: html

   <br />
   
Monitor and MonitorTimestamp
----------------------------
Monitors and timestamped monitors are a way to collect data from the simulation. They are automatically collected
for resources, queues and states. On top of that the user can define its own (timestamped) monitors.

Monitor
^^^^^^^
The Monitor class collects values which do not have a direct relation with the current time, 
e.g. the processing time of a part.

We define the monitor with ``processingtime=sim.Monitor('processingtime')`` and then
collect values by ``processingtime.tally(env.now()-start)``

By default, the collected values are stored in a list. Alternatively, it is possible to store
the values in an array of one of the following types:

========== =========== ==================== ==================== ===============
type       stored as   lowerbound           upperbound           number of bytes
========== =========== ==================== ==================== ===============
'any'      list        N/A                  N/A                  depends on data
'bool'     integer     False                True                 1
'int8'     integer     -128                 127                  1
'uint8'    integer     0                    255                  1
'int16'    integer     -32768               32767                2
'uint16'   integer     0                    65535                2
'int32'    integer     2147483648           2147483647           4
'uint32'   integer     0                    4294967295           4
'int64'    integer     -9223372036854775808 9223372036854775807  8
'uint64'   integer     0                    18446744073709551615 8
'float'    float       -inf                 inf                  8
========== =========== ==================== ==================== ===============

Monitoring with arrays takes up less space. Particularly when tallying a large
number of values, this is strongly advised.

Note that if non numeric values are stored (only possible with the default setting ('any')),
a tallied values is converted to a numeric value if possible, or 0 if not.

There is set of statistical data available:

* number_of_entries
* number_of_entries_zero
* mean
* std
* minimum
* median
* maximum
* percentile 
* bin_count (number of entries between to given values)

For all these statistics, it is possible to exclude zero entries, 
e.g. ``m.mean(ex0=True)`` returns the mean, excluding zero entries.

Besides, it is possible to get all collected values as an array with x(). In that case of 'any' monitors,
the values might be converted. By specifying ``force_numeric=False`` the collected values will be returned as stored.

With the monitor method, the monitor can be enbled or disabled. Note that a tally is just ignored when
the monitor is disabled.

Also, the current status (enabled/disabled) can be retrieved.

.. code-block:: python
    
    proctime.monitor(False)  # disable monitoring
    proctime.monitor(True)  # enable monitoring
    if proctime.monitor():
        print('proctime is enabled')

Calling m.reset() will clear all tallied values.

The statistics of a monitor can be printed with ``print_statistics()``. 
E.g: ``waitingline.length_of_stay.print_statistics()``:

.. code-block:: none

    Statistics of Length of stay in waitingline at     50000    
                            all    excl.zero         zero
    -------------- ------------ ------------ ------------
    entries            4995         4933           62    
    mean                 84.345       85.405
    std.deviation        48.309       47.672
    
    minimum               0            0.006
    median               94.843       95.411
    90% percentile      142.751      142.975
    95% percentile      157.467      157.611
    maximum             202.153      202.153    
    
And, a histogram can be printed with ``print_histogram()``. E.g.
``waitingline.length_of_stay.print_histogram(30, 0, 10)``:

.. code-block:: none

    Histogram of Length of stay in waitingline
                            all    excl.zero         zero
    -------------- ------------ ------------ ------------
    entries            4995         4933           62    
    mean                 84.345       85.405
    std.deviation        48.309       47.672
    
    minimum               0            0.006
    median               94.843       95.411
    90% percentile      142.751      142.975
    95% percentile      157.467      157.611
    maximum             202.153      202.153
    
               <=       entries     %  cum%
            0            62       1.2   1.2 |                                                                              
           10           169       3.4   4.6 ** |                                                                           
           20           284       5.7  10.3 ****    |                                                                      
           30           424       8.5  18.8 ******         |                                                               
           40           372       7.4  26.2 *****               |                                                          
           50           296       5.9  32.2 ****                     |                                                     
           60           231       4.6  36.8 ***                          |                                                 
           70           192       3.8  40.6 ***                             |                                              
           80           188       3.8  44.4 ***                                |                                           
           90           136       2.7  47.1 **                                   |                                         
          100           352       7.0  54.2 *****                                      |                                   
          110           491       9.8  64.0 *******                                            |                           
          120           414       8.3  72.3 ******                                                   |                     
          130           467       9.3  81.6 *******                                                          |             
          140           351       7.0  88.7 *****                                                                 |        
          150           224       4.5  93.2 ***                                                                       |    
          160           127       2.5  95.7 **                                                                          |  
          170            67       1.3  97.0 *                                                                            | 
          180            59       1.2  98.2                                                                               |
          190            61       1.2  99.4                                                                                |
          200            24       0.5  99.9                                                                                |
          210             4       0.1 100                                                                                   |
          220             0       0   100                                                                                   |
          230             0       0   100                                                                                   |
          240             0       0   100                                                                                   |
          250             0       0   100                                                                                   |
          260             0       0   100                                                                                   |
          270             0       0   100                                                                                   |
          280             0       0   100                                                                                   |
          290             0       0   100                                                                                   |
          300             0       0   100                                                                                   |
              inf         0       0   100     

MonitorTimestamp
^^^^^^^^^^^^^^^^
The MonitorTimestamp class collects tallied values along with the current (simulation) time.
e.g. the number of parts a machine is working on.

By default, the collected x-values are stored in a list. Alternatively, it is possible to store
the x-values in an array of one of the following types:

========== =========== ==================== ==================== =============== ====================
type       stored as   lowerbound           upperbound           number of bytes do not tally (=off)
========== =========== ==================== ==================== =============== ====================
'any'      list        N/A                  N/A                  depends on data N/A`
'bool'     integer     False                True                 1               255
'int8'     integer     -127                 127                  1               -128
'uint8'    integer     0                    254                  1               255
'int16'    integer     -32767               32767                2               -32768
'uint16'   integer     0                    65534                2               65535
'int32'    integer     2147483647           2147483647           4               2147483648
'uint32'   integer     0                    4294967294           4               4294967295
'int64'    integer     -9223372036854775807 9223372036854775807  8               -9223372036854775808 
'uint64'   integer     0                    18446744073709551614 8               18446744073709551615
'float'    float       -inf                 inf                  8               -inf
========== =========== ==================== ==================== =============== ====================

Monitoring with arrays takes up less space. Particularly when tallying a large
number of values, this is strongly advised.

Note that if non numeric x-values are stored (only possible with the default setting ('any')),
a tallied values is converted to a numeric value if possible, or 0 if not.

During the simulation run, it is possible to retrieve the last tallied value (which represents the 'current' value)
by calling Monitor.tally() without arguments. |n|
It's even possible to directly call the timestamped monitor to get the current value, e.g. ::

    level = sim.MonitorTimestamp('level')
    ...
    level.tally(10)
    ...
    print (level())  # will print 10
    
For the same reason, the standard length monitor of a queue can be used to get the current length of a queue: ``q.length()`` although
the more Pythonic ``len(q)`` is prefered.
    
There is whole set of statistical data available, which are all weighted with the duration:

* duration
* duration_zero (time that the value was zero)
* mean
* std
* minimum
* median
* maximum
* percentile 
* bin_count (number of entries between to given values)
* histogram (numpy definition)

For all these statistics, it is possible to exclude zero entries, e.g. ``m.mean(ex0=True)`` returns the mean, excluding zero entries.

The individual x-values and their duration can be retrieved xduration(). By default, the x-values will be returned as an array, even if 
the type is 'any'. In case the type is 'any' (stored as a list), the tallied x-values will be converted to a numeric value or 0 if
that's not possible. By specifying ``force_numeric=False`` the collected x-values will be returned as stored.

The individual x-values and the associated timestamps can be retrieved with xt() or tx(). By default, the x-values will be returned as an array, even if 
the type is 'any'. In case the type is 'any' (stored as a list), the tallied x-values will be converted to a numeric value or 0 if
that's not possible. By specifying ``force_numeric=False`` the collected x-values will be returned as stored.

When monitoring is disabled, an off value (see table above) will be tallied. All statistics will ignore the periods from this
off to a non-off value. This also holds for the xduration() method, but NOT for xt() and tx(). Thus,
the x-arrays of xduration() are not necessarily the same as the x-arrays in xt() and tx(). This is
the reason why there's no x() or t() method. |n|
It is easy to get just the x-array with xduration()[0] or xt()[0].

With the monitor method, the timestamped monitor can be enbled or disabled.

Also, the current status (enabled/disabled) can be retrieved.

.. code-block:: python
    
    level.monitor(False)  # disable monitoring
    level.monitor(True)  # enable monitoring
    if level.monitor():
        print('level is enabled')

It is strongly advised to keep tallying when monitoring is off, in order to be able to access the current value at any time. The values tallied when monitoring is off
are not stored.
        
Calling m.reset() will clear all tallied values and timestamps.

The statistics of a timestamped monitor can be printed with ``print_statistics()``. 
E.g: ``waitingline.length.print_statistics()``:

.. code-block:: none

    Statistics of Length of waitingline at     50000    
                            all    excl.zero         zero
    -------------- ------------ ------------ ------------
    duration          50000        48499.381     1500.619
    mean                  8.427        8.687
    std.deviation         4.852        4.691
    
    minimum               0            1    
    median                9           10    
    90% percentile       14           14    
    95% percentile       16           16    
    maximum              21           21    
      
And, a histogram can be printed with ``print_histogram()``. E.g. ::

    waitingline.length.print_histogram(30, 0, 1)

.. code-block:: none

    Histogram of Length of waitingline
                            all    excl.zero         zero
    -------------- ------------ ------------ ------------
    duration          50000        48499.381     1500.619
    mean                  8.427        8.687
    std.deviation         4.852        4.691
    
    minimum               0            1    
    median                9           10    
    90% percentile       14           14    
    95% percentile       16           16    
    maximum              21           21    
    
               <=      duration     %  cum%
            0          1500.619   3.0   3.0 **|                                                                            
            1          2111.284   4.2   7.2 ***  |                                                                         
            2          3528.851   7.1  14.3 *****      |                                                                   
            3          4319.406   8.6  22.9 ******            |                                                            
            4          3354.732   6.7  29.6 *****                  |                                                       
            5          2445.603   4.9  34.5 ***                        |                                                   
            6          2090.759   4.2  38.7 ***                           |                                                
            7          2046.126   4.1  42.8 ***                               |                                            
            8          1486.956   3.0  45.8 **                                  |                                          
            9          2328.863   4.7  50.4 ***                                     |                                      
           10          4337.502   8.7  59.1 ******                                         |                               
           11          4546.145   9.1  68.2 *******                                               |                        
           12          4484.405   9.0  77.2 *******                                                      |                 
           13          4134.094   8.3  85.4 ******                                                              |          
           14          2813.860   5.6  91.1 ****                                                                    |      
           15          1714.894   3.4  94.5 **                                                                         |   
           16           992.690   2.0  96.5 *                                                                            | 
           17           541.546   1.1  97.6                                                                               |
           18           625.048   1.3  98.8 *                                                                              |
           19           502.291   1.0  99.8                                                                                |
           20            86.168   0.2 100.0                                                                                |
           21             8.162   0.0 100                                                                                   |
           22             0       0   100                                                                                   |
           23             0       0   100                                                                                   |
           24             0       0   100                                                                                   |
           25             0       0   100                                                                                   |
           26             0       0   100                                                                                   |
           27             0       0   100                                                                                   |
           28             0       0   100                                                                                   |
           29             0       0   100                                                                                   |
           30             0       0   100                                                                                   |
              inf         0       0   100  
   
